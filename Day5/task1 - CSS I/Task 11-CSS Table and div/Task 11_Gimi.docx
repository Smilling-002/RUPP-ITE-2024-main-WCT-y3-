Tables vs. <div> for Layout

While both tables and <div> elements can be used for layout, it's generally recommended to use <div> elements with CSS for more flexible and semantic layouts.

Tables:

Traditional Use: Originally designed for tabular data, tables were often used for layout purposes.
Limitations: Can be inflexible and difficult to style for complex layouts.
When to Use:
Displaying tabular data (e.g., spreadsheets, schedules).
Simple, fixed layouts that don't require much flexibility.
<div> Elements:

Semantic HTML: <div> elements are generic containers that can be used to group content.
CSS Styling: With CSS, you can style <div> elements to create complex layouts and responsive designs.
Flexibility: More flexible and easier to maintain than tables.
When to Use:
Creating complex layouts with responsive design.
Structuring content semantically.
Example:

HTML:

HTML
<!DOCTYPE html>
<html>
<head>
    <title>Table vs. Div Layout</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <h2>Table Layout</h2>
    <table>
        <tr>
            <th>Name</th>
            <th>Age</th>
            <th>City</th>
        </tr>
        <tr>
            <td>Alice</td>
            <td>25</td>
            <td>New York</td>
        </tr>
        <tr>
            <td>Bob</td>
            <td>30</td>
            <td>London</td>
        </tr>
    </table>

    <h2>Div Layout</h2>
    <div class="container">
        <div class="item">Name: Alice</div>
        <div class="item">Age: 25</div>
        <div class="item">City: New York</div>
    </div>
</body>
</html>
Use code with caution.

CSS:
table {
    border-collapse: collapse;
    width: 100%;
}

th, td {
    border: 1px solid black;
    padding: 8px;
    text-align: left;
}

.container {
    display: flex;
    flex-direction: column;
    border: 1px solid black;
    padding: 10px;
}

.item {
    border-bottom: 1px solid black;
    padding: 5px;
}